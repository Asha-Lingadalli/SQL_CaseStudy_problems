-- select * from regions
-- select * from stores
-- select * from customers
-- select * from products
-- select * from transactions

-- Level 1 – Beginner (Foundations)
--Basic SELECT, WHERE, ORDER BY, DISTINCT, LIMIT

--1)List all customers with their city and join date.
-- select first_name,city,join_date
-- from customers

--2)Retrieve all transactions that happened in July 2023.
-- select * 
-- from transactions
-- where transaction_date between '2023-07-01' and '2023-07-31'

--3)Display all unique product categories from the products table.
-- select distinct category
-- from products

--4)Find all products with a price greater than ₹10,000.
-- select *
-- from products
-- where price > 10000

--5)Show the first 5 transactions sorted by transaction_date.
-- select *
-- from transactions
-- order by transaction_date
-- limit 5

--6)Find all female customers (gender = 'F').
-- select *
-- from customers
-- where gender ='F'

--7)Get all transactions where discount is greater than or equal to 10%.
-- select * 
-- from transactions
-- where discount >= 10

--8)Show customer names who joined after January 2023.
-- select * 
-- from customers
-- where join_date > '2023-01-01'

--9)Find all stores located in the region "South India".
-- select * 
-- from stores s
-- left join regions r on s.region_id=r.region_id
-- where region_name='South India'

--10)Display the list of all products ordered in August 2023.
-- select * 
-- from products p
-- left join transactions t on p.product_id=t.product_id
-- where transaction_date between '2023-08-01' and '2023-08-31'

--Level 2 – Intermediate (Joins, Grouping, Aggregations)

--11)Calculate the total revenue from all transactions.
-- select sum(total_amount)  as total_revenue
-- from transactions

--12)Show total revenue per store (store name + total amount).
-- select s.store_name,sum(t.total_amount) 
-- from stores s
-- join transactions t on s.store_id=t.store_id
-- group by s.store_name

--13)Find the total quantity sold of each product.
-- select p.product_name,sum(t.quantity) as quantity
-- from products p
-- join transactions t on p.product_id=t.product_id
-- group by p.product_name

--14)Display the average discount applied across all transactions.
-- select avg(discount) as avg_discount
-- from transactions

--15)List each customer along with their total number of transactions.
-- select c.first_name,count(t.transaction_id) as total_no_transactions
-- from customers c
-- join transactions t on c.customer_id=t.customer_id
-- group by c.first_name

--16)Find the total revenue generated by each region.
-- select r.region_name,sum(t.total_amount) 
-- from regions r
-- join stores s on r.region_id=s.region_id
-- join transactions t on s.store_id=t.store_id
-- group by r.region_name

--17)Calculate the average price of products per category.
-- select category,avg(price) as avg_price
-- from products
-- group by category

--18)Show the top 3 stores based on total revenue.
-- select s.store_name,sum(t.total_amount) as totatl_revenue
-- from stores s
-- left join transactions t on s.store_id=t.store_id
-- group by s.store_name
-- order by sum(t.total_amount) desc
-- limit 3

--using cte
-- with total_rev as(
-- select s.store_name,sum(t.total_amount) as total_revnue
-- from stores s
-- left join transactions t on s.store_id=t.store_id
-- group by s.store_name)
-- ,rev as (select * ,
-- row_number() over(order by total_revnue desc)as rnk
-- from total_rev)
-- select *
-- from rev
-- where rnk <= 3

--19)Find the total revenue per month (group by month).
-- select sum(total_amount) as total_rev,extract(month from transaction_date) as month
-- from transactions
-- group by month
-- order by month 

--20)Get the most popular product (highest total quantity sold).
-- select p.product_name,sum(t.quantity) as sum_quantity
-- from products p
-- left join transactions t on p.product_id=t.product_id
-- group by  p.product_name 
-- order  by sum_quantity desc
-- limit 1

--using ctes
-- with total_quantity as
-- (select p.product_name,sum(t.quantity) as sum_quantity
-- from products p
-- left join transactions t on p.product_id=t.product_id
-- group by  p.product_name )
-- , rnk_no as(select *,
-- row_number()over(order by sum_quantity desc) rnk
-- from total_quantity)
-- select *
-- from rnk_no
-- where rnk=1


--Level 3 – Advanced (Subqueries, CTEs, Aggregates)

--21)Find customers who have purchased more than one distinct product.
-- select count(distinct p.product_id) as product_count,c.first_name
-- from customers c
-- join transactions t on c.customer_id=t.customer_id
-- join products p on t.product_id=p.product_id
-- group by c.first_name
-- having count(distinct p.product_id) > 1

--22)Display the highest single transaction value and which customer made it.
-- select *
-- from transactions t
-- join customers c
-- on t.customer_id=c.customer_id 
-- where total_amount=(select max(total_amount) from transactions)

--using ctes
-- with total_Amount as (
-- select max(total_amount) as total_Amt
-- from transactions)
-- select t.*,c.first_name
-- from transactions t 
-- join customers c on t.customer_id=c.customer_id
-- join total_amount ta on t.total_amount=ta.total_Amt

--23)Find the total revenue per category by joining all required tables.
-- select p.category,sum(total_amount) as total_amount
-- from products p
-- join transactions t on p.product_id=t.product_id
-- group by p.category
-- order by total_amount desc

--24)Identify the top 3 customers by total spending amount.
-- select c.first_name,sum(t.total_amount) as total_amount
-- from customers c
-- join transactions t on c.customer_id = t.customer_id
-- group by c.first_name
-- order  by total_amount desc
-- limit 3

--25)Show the average transaction amount per customer.
-- select round(avg(total_amount),2) as avg_amt,c.first_name
-- from customers c
-- join transactions t on c.customer_id=t.customer_id
-- group by c.first_name

--26)List all customers who never received any discount on their purchases.
-- select c.first_name,max(discount) as dis 
-- from customers c
-- left join transactions t on c.customer_id=t.customer_id
-- group by c.first_name
-- having max(discount) = 0

--27)Find all products that were never sold.
-- select p.product_name 
-- from products p
-- left join transactions t on p.product_id=t.product_id
-- where t.transaction_id is null

--28)Display for each store: the number of transactions and total quantity sold.
-- select s.store_name,count(t.transaction_id) as no_transactions,sum(t.quantity)as total_quantity
-- from stores s
-- join transactions t on s.store_id=t.store_id
-- group by s.store_name

--29)Using a CTE, find the total revenue by region and their percentage of overall revenue.
-- with total_rev_region as (
-- select r.region_name,sum(total_amount) as reg_total_amt
-- from regions r
-- join stores s on r.region_id=s.region_id
-- join transactions t on s.store_id=t.store_id
-- group by r.region_name
-- )
-- select *,
-- (reg_total_amt/sum(reg_total_amt) over()) * 100 as per_overall_revnue
-- from total_rev_region

--30)Calculate the total revenue, total discount, and net effective price per product category.
-- select p.category,sum(t.total_amount)as total_revnue,sum(t.discount) as total_discount,
-- round(avg(p.price * (1 - t.discount / 100)),2) as net_effective_price
-- from transactions t
-- join products p on t.product_id=p.product_id
-- group by p.category

--Level 4 – Expert (Window Functions, Ranking, Analytics)

--31)Rank customers based on their total spending (highest first).
-- with total_spent as (
-- select c.first_name,sum(t.total_amount) as total_spend
-- from customers c
-- join transactions t on c.customer_id=t.customer_id
-- group by c.first_name
-- )
-- select *,
-- row_number() over(order by total_spend desc)as rnk
-- from total_spent

--32)For each region, rank stores by their revenue performance.
-- with region_store_rev as(
-- select r.region_name,s.store_name,sum(t.total_amount) as total_revenue
-- from regions r
-- join stores s on r.region_id=s.region_id
-- join transactions t on s.store_id=t.store_id
-- group by r.region_name,s.store_name
-- )
-- select *,
-- row_number() over(partition by region_name order by total_revenue desc ) as rnk
-- from region_store_rev

--33)Show month-over-month revenue growth percentage for the entire business.
-- with monthly_revenue as(
-- select extract(year from transaction_date) as year,
-- extract(month from transaction_date)as month,
-- sum(total_amount) as total_rev
-- from transactions
-- group by year,month
-- )
-- select * ,
-- lag(total_rev) over(order by year,month) as prev_month_rev,
-- round((total_rev - lag(total_rev) OVER(ORDER BY year, month)) / lag(total_rev) OVER(ORDER BY year, month) * 100,2 )AS mom_growth_percentage
-- from monthly_revenue

--34)Identify repeat customers (who made more than one transaction).
-- select c.customer_id,c.first_name
-- from customers c
-- join transactions t on c.customer_id=t.customer_id
-- group by c.first_name,c.customer_id
-- having count(t.transaction_id) > 1

--35)For each product, find the average discount and compare it to the overall average discount.
-- select p.product_name,avg(t.discount) as avg_disc
-- from products p
-- join transactions t on p.product_id=t.product_id
-- group by p.product_name
-- having avg(t.discount) > (select avg(discount)
-- from transactions)

--36)Find the top 1 selling product per month.
-- with month_product as (
-- select p.product_name,extract(month from t.transaction_date) as month,sum(t.quantity) as quantity
-- from products p
-- join transactions t on p.product_id=t.product_id
-- group by month,p.product_name
-- ),
-- product as (
-- select *,
-- row_number() over(partition by month order by quantity desc ) as rnk
-- from month_product
-- )
-- select * 
-- from product
-- where rnk = 1

--37)For each customer, calculate their average transaction value and total purchase count.
-- select c.first_name,avg(t.total_amount)as avg_total_amt,count(t.transaction_id) as total_purchase_count
-- from customers c
-- join transactions t on c.customer_id=t.customer_id
-- group by c.first_name

--38)Find customers who have spent above average compared to the overall mean revenue.
-- with customer_spent as (
-- select c.first_name,sum(total_amount) as sum_amt
-- from customers c
-- join transactions t on c.customer_id=t.customer_id
-- group by c.first_name
-- )
-- select *
-- from customer_spent
-- where sum_amt > (select avg(sum_amt) from customer_spent)

--40)Calculate the cumulative revenue trend over time (using window functions).
-- select transaction_date,
-- sum(total_amount) over(order by transaction_date ) as cummulative_rev
-- from transactions

--41)Perform an RFM (Recency, Frequency, Monetary) analysis:
--Recency → Days since last purchase
-- select c.customer_id,max(t.transaction_date) as last_purchase
-- from customers c 
-- join transactions t on  c.customer_id=t.customer_id
-- group by c.customer_id

--Frequency → Total number of transactions
-- select c.customer_id,count(t.transaction_id) as total_no_transactions
-- from customers c
-- join  transactions t on  c.customer_id=t.customer_id
-- group by c.customer_id

--Monetary → Total revenue spent
-- select c.customer_id,sum(t.total_amount) as total_revenue_spent
-- from customers c
-- join  transactions t on  c.customer_id=t.customer_id
-- group by c.customer_id

--all in one query
-- select c.customer_id,max(t.transaction_date) as last_purchase,
-- count(t.transaction_id) as total_no_transactions,
-- sum(t.total_amount) as total_revenue_spent
-- from customers c
-- join  transactions t on  c.customer_id=t.customer_id
-- group by c.customer_id
